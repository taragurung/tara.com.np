[{"group":"blog","slug":"blog/devops-roadmap-for-beginners-my-experience","frontmatter":{"title":"DevOps Engineer Roadmap for beginners","meta_title":"DevOps Roadmap for beginners, based on my DevOps working experience","description":"DevOps Roadmap for beginners, based on my personal experience!","date":"2024-07-29T05:00:00.000Z","image":"/images/devops_roadmap_for_beginners_my_experience.png","categories":["DevOps","tips"],"author":"Tara Prasad Gurung","tags":["devops","devops-roadmap","devops-beginners-guide"],"draft":false},"content":"\r\nIn this blog, I want to share my experience of how someone can become a DevOps Engineer. This is not a 30-day tutorial or a set of resources to make you a DevOps Engineer in a specific number of days, but rather a guide for beginners based on my experience. Learning is a continuous process, and if done the right way, it can make your journey better.\r\n\r\nI was a Developer turned DevOps Engineer, so the beginning was not easy for me. I was working as a Python programmer in a hosting company that was also automating processes and practicing DevOps. That is how my journey began. Here are a few of the things I struggled with:\r\n\r\n- Not all, but most Developers are not familiar with networking, so it was a big hurdle for me in my DevOps journey. I started reading and practicing it a lot. I also did CCNA training, which helped me greatly to understand networking concepts.\r\n- I was a Windows operating system user, which was another problem because most of the systems I had to work with were Linux, and I was not familiar with Linux commands. The next challenge for me was learning and excelling at Linux operating systems.\r\n\r\n> Knowing Networking and Linux is must.\r\n\r\n\r\n## Things I learned on my Devops journey:\r\n\r\n### Learn the basic ideology behind: \r\nGet familiar with DevOps concepts and how they help an organization that follows DevOps principles. Understanding the fundamental idea behind DevOps is very beneficial. DevOps is not just about learning the tools and doing automation; it's a culture and mindset that can bring about significant changes. Tools are just the pillars that support this culture. Over time, beginners will understand this concept as well, so there's no need to panic.\r\n\r\n### Linux and Networking in must:\r\nAs stated before without this your DevOps journey is going to get harder. I am still learning it.\r\n\r\n### Getting familiar with CICD:\r\nAs a DevOps guy, most of us would be assigned to set up a CICD pipeline. It has helped me a lot to get to know how applications are built and deployed and making it production ready. \r\n\r\nDuring the process we also get to know how automation can help ease the regular monotonous process. It also helps us think from different thought processes like what if the deployment fails then we need to think about how to rollback what we did to deploy the changes.\r\n\r\nBelieve me it adds one level of confidence as well when you can set up a CICD and successfully deploy the application. There are many tools out there for doing CICD but for a beginner Jenkins can be an easy way to start. These days CICD can be done directly in the code repository itself so can be easily learned using the CICD feature in the code repository itself.\r\n\r\n### Learn bash scripting:\r\nFor someone from a coding background it would be the easiest part. In general,I almost always use bash scripts in all my CICD pipelines. Also it can be used where some sort of automations are required. \r\n \r\n### Get familiar with Docker:\r\nI donâ€™t want to speak here about what and how to use docker but what I want to say is most of the companies are containerizing their application and how to use and implement it.\r\n\r\n### Get to know some Cloud Providers:\r\nGetting familiar with at least one cloud provider like AWS , GCP or Azure. The benefits of such cloud providers are they help in easy setting up servers where we can learn and destroy when not required else it would have been a bit difficult to manage resources.  \r\n\r\n### Get familiar with Kubernetes:\r\nDocker is the fundamental thing to know before getting into Kubernetes. Companies are shifting to deploying their application on the kubernetes cluster and making their application highly available and scalable. \r\n\r\n### Conclusion:\r\nI have not intentionally added many things in here which might even overwhelm the beginners so putting it here is the minimal things someone can focus on to make their journey easier and fruitful. `I repeat this are based on my experience which worked for me, that does not mean will work for all.` \r\n"},{"group":"blog","slug":"blog/health-check-and-monitoring-with-uptime-kuma-kuberetes-setup-guide","frontmatter":{"title":"Health check with Uptime Kuma, complete setup guide in kubernetes ","meta_title":"learn to setup uptime kuma an opensource tool in kubernetes and send notification to Teams","description":"Uptime kuma is the best health check tools, easy to install and setup necessary health check. we will do the setup in AWS eks cluster with helm chart and also see how it works and sents notifications to Teams Channel with workflow setup.","date":"2024-07-31T11:10:00.000Z","image":"/images/uptime-kuma-kubernetes-helm.png","categories":["Uptime-kuma","Monitoring","DevOps"],"author":"Tara Prasad Gurung","tags":["uptime-kuma","uptime-kume teams-alert","healcheck and monitoring"],"draft":false},"content":"\r\nI have been in this situation a lot. The services we set up went down for some reason and we are not aware of it. The customer knows about it the first and let us know. This is one of the worst situation to be in. All the services that we setup should be under our control or we should be the one to know about it or we should know about the failure as soon as things goes wrong. \r\n\r\nThe application we deploy might go wrong any time and it's possible that we are not aware of it. To bring us all out of this worst situation we need to setup a monitoring tools that will continuously monitor our sytem or appliation and let us know as soon as something goes wrong.\r\n\r\n### There are multiple ways to do it:\r\n- you can write script of your own, which needs a way more time investment\r\n- install monitoring tools nagios, prometheus with alertmanager and grafana \r\n- use third party services like NewRelic, DataDog and many more in the market\r\n- setup an opensource tool like uptime kuma.\r\n\r\nThe choice is yours which one you prefer. It also depends on the budget you have. Here we are going to use the opensource tool called *uptime kuma* which I found to be the best tool so far for the purpose.\r\n\r\n## Why uptime kuma?\r\n- I find it way easier to setup then any other tools available\r\n- The configuration part is pretty easy and has many options available.\r\n- It's opensource\r\n\r\n## Our Goal \r\n- We will setup uptime kuma using helm chart\r\n- we will setup a simple nginx service and try to monitor it in uptime kuma\r\n- The notification will be sent to MicroSoft teams as an alert.\r\n\r\n\r\n### Installing uptime kuma with helm chart:\r\nAdding helm chart repo and installing it on uptime-kuma namespace\r\n```\r\nhelm repo add uptime-kuma https://helm.irsigler.cloud\r\nhelm install uptime-kuma uptime-kuma/uptime-kuma -n uptime-kuma --create-namespace \r\n```\r\n### Make necessary changes in kuberenetes:\r\nThese are few things you can do for setting up domain for the uptime kuma.\r\n- update helm chart to enable ingress and setup proper domain for the service\r\n- update helm chart to add proper domain to set for the ingress \r\n\r\nHere: we will simply check by port-forwarding the service\r\n\r\n#### simple nginx deployment and service for testing purpose\r\nSimply create a deployment and service for testing purpose. I will be creating it on \"testing\" namespace.\r\n\r\ndeployment.yaml\r\n```\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: nginx-deployment\r\n  namespace: testing\r\n  labels:\r\n    app: nginx\r\nspec:\r\n  replicas: 1\r\n  selector:\r\n    matchLabels:\r\n      app: nginx\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: nginx\r\n    spec:\r\n      containers:\r\n      - name: nginx\r\n        image: nginx:latest\r\n        ports:\r\n        - containerPort: 80\r\n```\r\n\r\nservice.yaml\r\n\r\n```\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: nginx-service\r\n  namespace: testing\r\nspec:\r\n  selector:\r\n    app: nginx\r\n  ports:\r\n    - protocol: TCP\r\n      port: 80\r\n      targetPort: 80\r\n  type: ClusterIP\r\n```\r\n\r\n\r\n## Setting up workflow in Teams\r\nThe way we used to setup webhook in microsoft teams is deprecated now, so we do it via workflow instead. We choose a flow which will trigger an action when post request is received on the webhook as shown in the screenshot image. \r\n\r\n![Alt text](public/images/teams-workflow-webhookreqest-received.PNG)\r\n\r\nDo the necessary settings as requested like setting up flow-name, choosing the channel name and many more. \r\n> We get a webhook url as shown in image , put it safe which we would need and thats where all the post request will be done for notifications. \r\n\r\n![Alt text](public/images/webhook-url-generated.PNG)\r\n\r\n## Finally configuring the uptime kuma setting up monitor and notification:\r\n- add the new monitor in uptime kuma\r\n- for us as we are monitoring the kubernetes service with no external url or might not even have it in case of kubernetes so we would choose to do health check with TCP protocol\r\n- set the proper names for monitor, for url for our case it will be nginx-service.testing.svc.cluster.local`\r\n\r\n#### notification settings \r\n```\r\n {\r\n       \"type\":\"message\",\r\n       \"attachments\":[\r\n          {\r\n         \"contentType\":\"application/vnd.microsoft.card.adaptive\",\r\n             \"contentUrl\":null,\r\n             \"content\":{\r\n                \"$schema\":\"http://adaptivecards.io/schemas/adaptive-card.json\",\r\n                \"type\":\"AdaptiveCard\",\r\n                \"version\":\"1.2\",\r\n                \"body\":[\r\n                    {\r\n                    \"type\": \"TextBlock\",\r\n                    \"text\": \"{{msg}}\",\r\n                    \"description\": \r\n                     \"size\": \"large\",\r\n                      \"weight\": \"bolder\"\r\n                      \r\n                    }\r\n                ]\r\n             }\r\n          }\r\n       ]\r\n    }\r\n```\r\n\r\n"},{"group":"blog","slug":"blog/understanding-private-public-network-wtih-bastion-host-setupguide","frontmatter":{"title":"Getting familiar with Private and Public network with real-time project (bastion host)","meta_title":"Beginners guide to Private and Public network with realtime practical examples ovpn setup done for making things clear.","description":"Beginners guide to AWS Private and Public network, how to access private network content with bastion host, learning with example","date":"2023-04-04T05:00:00.000Z","image":"/images/private-public-network-guide-with-real-project-example-bastion-setup.jpg","categories":["AWS","DevOps"],"author":"Tara Prasad Gurung","tags":["networking","bastion-host","private-subnet","public-subnet"],"draft":false},"content":"\r\n\r\nThe purpose of this article is to familiarize readers with private and public networks using examples and real-time use cases.\r\nYou might have seen many tutorials on setting up OpenVPN, but most of them lack a comprehensive guide for complete beginners. Also this will give beginners idea about privat and public network and how we can access resources from private network.\r\n\r\nIn this tutorial, we will cover everything from setting up the machine in a private subnet to configuring OpenVPN and testing the connection to ensure everything works as expected.\r\n\r\n## Network setup: \r\n- Create a VPC\r\n- Create a private and public subnet\r\n- Make sure necessary network components are well setup in private and public subnet, like NAT Gateway and Internet Gateway\r\nNote: These days all these setup can be automated while creating a VPC.\r\n\r\n## how it works:\r\n![Alt text](private-public-network-guide-with-real-project-example-bastion-setup.jpg)\r\n\r\nAs you can see in the image, when we run a service in a private network, it is not possible to access it publicly. However, when we have an OpenVPN setup completed and are connected to the VPN, we can connect to the service in the private network using its private IP as well.\r\n\r\n\r\n## Making Machine ready for Bastion host and OpenVPN:\r\nWe would be setting up and using AWS for setting up the machine. \r\n\r\nTo access the machine in a private subnet we would need one machine that would act as a single source to access it, people call it a bastion host. \r\n\r\nAnd to access the service in a private subnet in a more secure way we would set up a OpenVPN also which serves a purpose of making service in private networks available. Here in this example we would simply run a nginx server in a private network and make it accessible after connecting to a VPN server. \r\n\r\n### Setting up Openvpn with docker-compose:\r\n\r\n***Installing docker and docker-compose***\r\n```\r\nsudo apt-get update\r\nsudo apt-get install docker.io\r\ncurl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\r\nchmod +x /usr/local/bin/docker-compose\r\n```\r\n\r\n### Install openvpn\r\n\r\nThis is the official source to setup openvpn using docker:\r\nhttps://github.com/kylemanna/docker-openvpn?tab=readme-ov-file\r\n\r\nAnd here is the documentation to setup openvpn using docker-compose:\r\nhttps://github.com/kylemanna/docker-openvpn/blob/master/docs/docker-compose.md\r\n\r\n\r\n\r\n### Setup new EC2 on private subnet with private ip only:\r\n- Make sure the setup has NAT Gateway , else machine in private network won't be able to connect to internet\r\n- Connect via Bastion host to the private machine which would require key first \r\n- Authorise bastion host so next time won't require a private key.\r\n- Setup nginx\r\n- Make security group setting to allow access to port-80 from bastion host internal-IP\r\n\r\n### Install nginx on private network created:\r\n```\r\nsudo apt-get update\r\nsudo apt-get install -y nginx\r\n```\r\n\r\n## Alternative Setting up OpenVpn using Ovpn ami available in marketplace\r\nYou can also use the OpenVPN AMI available in the AWS Marketplace and simply set it up, following the same network concepts mentioned above.\r\n\r\n## Conclusion:\r\nWith this example and setup process, I believe the distinction between private and public networks will become clearer.\r\n"}]